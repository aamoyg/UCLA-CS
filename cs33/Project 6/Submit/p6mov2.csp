;       UCLA SPRING 2003
;       CS 33 PROJECT 6:  CONSTRUCTION PROJECT:
;                         OPERATOR MOVES 2
;       JOHN A. ROHR
;       JANUARY 20, 2003
;
        .EQU     N,6                     ; BRICK GRAB LIMIT
        .EQU     TRYLMT,10               ; MOVE  TRY  LIMIT

        .EQU     TIMBIN,$FF7             ; BINARY TIME LOCATION

        .EQU     DEBUG,0                 ; DEBUG CONTROL
        .EQU     ROWS,14                 ; DISPLAY ROWS
        .EQU     COLS,38                 ; DISPLAY COLUMNS

        .EQU     DROWS,3                 ; DATA     ROWS
        .EQU     BROWS,10                ; BUILDING ROWS
        .EQU     BCOLS,24                ; BUILDING COLUMNS
        .EQU     SROWS,10                ; BUILDING ROWS
        .EQU     SCOLS,12                ; BUILDING COLUMNS
        .EQU     MAXGRD,8                ; MAXIMUM  GIRDERS

        .EQU     BURPOS,14               ; INITIAL BUILDING ROW
        .EQU     BUCPOS,1                ; INITIAL BUILDING COLUMN
        .EQU     SURPOS,14               ; INITIAL SUPPLY   ROW
        .EQU     SUCPOS,27               ; INITIAL SUPPLY   COLUMN
        .EQU     CRRPOS,4                ; INITIAL CRANE    ROW
        .EQU     CRCPOS,27               ; INITIAL CRANE    COLUMN
        .EQU     CRICHR,'c'              ; INITIAL CRANE    CHAR

;       .EQU     MOVERT,'M'              ; MOVE RIGHT CHARACTER
;       .EQU     MOVELT,'K'              ; MOVE LEFT  CHARACTER
;       .EQU     MOVEUP,'H'              ; MOVE UP    CHARACTER
;       .EQU     MOVEDN,'P'              ; MOVE DOWN  CHARACTER

;       .EQU     ENDPRG,'Q'              ; QUIT               CHAR
;       .EQU     SHOCON,'C'              ; SHOW CONSTRUCTION  CHAR
;       .EQU     SHOSOL,'S'              ; SHOW SOLUTION      CHAR
        .EQU     GRAB1,'1'               ; GRAB ONE BRICK     CHAR
        .EQU     GRABG,'G'               ; GRAB GIRDER INPUT  CHAR
        .EQU     GRABGC,'C'              ; GRAB GIRDER DISPLY CHAR
        .EQU     RELEAS,'R'              ; RELEASE LOAD       CHAR

        .EQU     TITPOS,0                ; TITLE          POSITION
        .EQU     STAPOS,TITPOS+COLS      ; STATUS         POSITION
 ;       .EQU     SEPPOS,TITPOS+2*COLS    ; SEPARATOR      POSITION
 ;       .EQU     MODPOS,STAPOS           ; MODE           POSITION
 ;       .EQU     TIMPOS,STAPOS+10        ; TIME           POSITION
 ;       .EQU     BRKPOS,STAPOS+21        ; BRICKS         POSITION
 ;       .EQU     BRTPOS,STAPOS+25        ; BRICK TOTAL    POSITION
 ;       .EQU     GRDPOS,STAPOS+35        ; GIRDERS        POSITION
 ;       .EQU     GRTPOS,STAPOS+37        ; TOTAL GIRDERS  POSITION
 ;       .EQU     ERRPOS,STAPOS+9         ; TERMINAL ERROR POSITION
 ;       .EQU     TRYPOS,STAPOS+16        ; TOO MAY TRIES  POSITION
        .PAGE                    ;
        .EQU     CRT_BUF,$100    ; CRT DISPLAY I/O ADDRESS
        .EQU     CRT_XPOS,$314   ; CRT X POSITION  ADDRESS
        .EQU     CRT_YPOS,$315   ; CRT Y POSITION  ADDRESS
        .EQU     CRT_CTRL,$316   ; CRT CONTROL I/O ADDRESS

        .EQU     INIFUN,$FFC     ; I/O INITIALIZATION FUNCTION
        .EQU     KBDFUN,$FFD     ; I/O KEYBOARD       FUNCTION
        .EQU     TAPFUN,$FFE     ; I/O TAPE DRIVE     FUNCTION
        .EQU     CLKFUN,$FFF     ; I/O CLOCK          FUNCTION


        .EQU     CLEAR,1         ; CRT   CLEAR SCREEN OPCODE
        .EQU     BELLOP,6        ; CRT   RING BELL    OPCODE

        .EQU     TAPREW,0        ; TAPE  REWIND       OPCODE
        .EQU     TAPRD,1         ; TAPE  READ         OPCODE

        .EQU     CLKRES,1        ; CLOCK RESET OPCODE + 1
        .EQU     CLKGO,2         ; CLOCK START OPCODE + 1
        .EQU     CLKSTP,0        ; CLOCK STOP  OPCODE + 1


        .EQU     TERM,0          ; STRING TERMINATOR


        .EQU     SUCCES,0        ; SUCCESS INDICATOR
        .EQU     I,1             ; LOOP INDEX



        .EQU     ERROR,$B00      ; DISPLAY ERROR       SUBROTUINE
        .EQU     PUTNUM,$B01     ; DISPLAY NUMBER      SUBROUTINE
        .EQU     PTOA,$B02       ; POSITION-TO-ADDRESS FUNCTION
		.EQU	 MAX_GRI_ROW, 19 ;

        .EQU     @,$800          ; SUBROUTINE MODULE CODE ADDRESS

                                 ; TRANSFER TABLE
         JMP     GRABMB          ; GRAB BRICK(S) FUNCTION
         JMP     GRAB1G          ; GRAB GIRDER   FUNCTION
         JMP     DROP            ; RELEASE LOAD  FUNCTION
        .PAGE                    ; **************************
                                 ; * GRAB M BRICKS FUNCTION *
                                 ; *                        *
                                 ; * RESULT:  0: NO GRAB    *
                                 ; *          1: OK GRAB    *
                                 ; *                        *
                                 ; **************************
                                 ;

.EQU	LOCAL1, 0				; LOCAL VARIABLES USED IN ALL FUNCTIONS
.EQU	LOCAL2,	1				;
.EQU	LOCAL3,	2				;

GRABMB: BGN#    3               ; INITIATE FUNCTION
        PSHX                    ; SAVE XR

		; IN CASE SOLUTION IS UP
		LDX#	STAPOS
		INB+	$100
		CMA#	'S'
		JEQ		GRAB_INVALID
		; ELSE KEEP ON


		LDA		CRANE
		CMA#	'c'
		JEQ		GRAB_BRICKS
		SBA#	'0'
		STA		M
		JMP		GRAB_INVALID

GRAB_BRICKS:	
								; GRAB ONE LOAD IF POSSIBLE
								; CHECK IF THERE IS ENOUGH BRICKS BEHIND
		JSR		GET_INDEX		; LOAD SCREEN POS INTO ACC
		STA		!LOCAL1
		LDX#	0
LOOP1:	CMX		M
		JEQ		DONE1
		STX		!LOCAL2
		LDX		!LOCAL1
		ADX#	38
		INB+	$100			; GET LOCATION
		CMA#	'B'
		JNE		GRAB_INVALID	; NOT POSSIBLE MOV
		STX		!LOCAL1
		LDX		!LOCAL2
		ADX#	1
		JMP		LOOP1
DONE1:
								; CHECK THAT IT IS NOT A GRIDER
		JSR		GET_INDEX
		STA		!LOCAL1
		TAX
		ADA#	38
		INB+	$100
		CMA#	'G'
		JEQ		GRAB_INVALID

								; CONTINUE WITH THE LOAD
		LDA		M
		ADA#	'0'
		STA		CRANE			; CRANE HAS VALUE OF PICKED UP (M) BRI
	
		JSR		GET_INDEX		; GETS SCREEN POSSITION INTO ACC 
		TAX						;
		LDA		CRANE
		OUTB+	$100			; OUTPUT NUMBER OF M 

		JSR		GET_INDEX
		ADA#	$100			; ACC HAS CURRENT POSSITION

		LDX		M				; LOAD BRICKS
		SBX#	1				; SUB 1 OF X REGISTER

								; CHECK THAT THERE IS ENOUGHT BRICKS TO GRAB
LOOP2:	ADA#	38				;
		STA     !LOCAL1			;
		INB*    !LOCAL1			;
		CMA#	'B'				;
		JNE		GRAB_INVALID	; IF NOT EXIT WITH INVALID
		SOJ		LOOP2			;
		LDA		CRNROW			; CHECK FOR LAST ROW 
		CMA#	MAX_GRI_ROW
		JLE		OVER_FLOW		; JUMP IF OVERFLOW
		LDA#	1				; 
		JMP		GRAB_OK			; IT IS OK TO GRAB BRICKS 

OVER_FLOW:
		LDA#	0				; IF NOT DO NOT PICKUP
		JMP		GRAB_DONE		; EXIT WITH FALSE ACC = 0

GRAB_INVALID:					; IN CASE OF INVALID GRAB
		LDA#	0				;
		JMP		@ + 2			;

GRAB_OK:
		LDA#	1

GRAB_DONE: 
        POPX	
        FIN#    3               ; TERMINATE FUNCTION
        RTN                     ; RETURN





        .PAGE                    ; **************************
                                 ; * GRAB 1 GIRDER FUNCTION *
                                 ; *                        *
                                 ; * RESULT:  0: NO GRAB    *
                                 ; *          1: OK GRAB    *
                                 ; *                        *
                                 ; **************************
                                 ;
								 ;
GRAB1G:  
		BGN#	3				; FUNCTION STARTS
        PSHX                    ; SAVE XR

		; IN CASE SOLUTION IS UP
		LDX#	STAPOS
		INB+	$100
		CMA#	'S'
		JEQ		GRAB_FAIL
		; ELSE KEEP ON




		LDA		CRNROW			; GET INDEX OF POSSITION
		SBA#	1
		MUL#	COLS
		ADA		CRNCOL
		SBA#	1
		ADA#	38
		STA    !LOCAL1
		TAX
								; CHECK THAT WE ARE ON TOP OF AN G
		INB+	$100			;
		CMA#	'G'				; 
		JNE		GRAB_FAIL		; IF NOT EXIT


		CLR		!LOCAL2			;
								; CHECK THE NUMBER OF GIRDERS ON RIGHT
CHECK_RIGHT:

		ADX#	1
		INB+	$100
		CMA#	'G'
		JNE		NO_MORE_RIGHT
		INC    !LOCAL2
		JMP		CHECK_RIGHT

NO_MORE_RIGHT:	
		LDA    !LOCAL2
		STA		GIRDR			; STORE QUANTITY

								; CHECK FOR SPACES ON THE LEFT
		CLR    !LOCAL2

		LDA    !LOCAL1			; LOAD INDEX 
		TAX						; MOVE TO X REGISTRE

CHECK_LEFT:						; SAME AS ABOVE BUT ON LEFT 
		SBX#	1
		INB+	CRT_BUF
		CMA#	'G'
		JNE		NO_MORE_LEFT
		INC    !LOCAL2
		JMP		CHECK_LEFT

NO_MORE_LEFT:	
		LDA    !LOCAL2
		STA		GIRDL			; SAVE LEFT NUMBER

		LDA		GIRDL			; CHECK FOR MINUUM OF 3 'G'
		ADA		GIRDR			;
		ADA#	1
		CMA#	3				;
		JLT		GRAB_FAIL		

		LDA#	'C'
		LDX		!LOCAL1
		STA		CRANE
		SBX#	38
		OUTB+	$100

		JMP		GRABED_DONE

GRAB_FAIL: 
		LDA#		0          ; SUCCES := 0
		JMP		@ + 2

GRABED_DONE:
		LDA#	1		      ; SET SUCCESS INDICATOR
		POPX
        FIN#    3               ; TERMINATE FUNCTION
        RTN                     ; RETURN
       .PAGE                    ; ***********************
                                ; * DROP LOAD FUNCTION  *
                                ; *                     *
                                ; * RESULT:  0: NO DROP *
                                ; *          1: OK DROP *
                                ; *                     *
                                ; ***********************
                                ;
















DROP:   
		BGN#    3               ; INITIATE FUNCTION
        PSHX                    ; SAVE XR

		; IN CASE SOLUTION IS UP
		LDX#	STAPOS
		INB+	$100
		CMA#	'S'
		JEQ		DROP_NOTHING
		; ELSE KEEP ON

		LDA		CRANE			; CHECK FOR CRANE			
		CMA#	'c'				; IF NOT LOADED
		JEQ		DROP_NOTHING	; EXIT WITH ACC = 0

		CMA#	'C'			
		JEQ		DROP_GIR			
	
								; CHECK IF BRINKS ARE TOUCHING SOMETHING 
		LDA		M
		ADA		CRNROW			
		CMA#	14
		JEQ		DROP_IT			; IF IT IS GO DROP IT


								; GET INDEX
		LDA		CRNROW
		SBA#	1
		MUL#	COLS
		ADA		CRNCOL
		SBA#	1
		STA    !LOCAL1			

		LDA#	1				; CHECK THAT NEXT POSSITION IS NOT BLANK		
		ADA		M				;
		MUL#	38				;

		ADA    !LOCAL1			;
		TAX				
		INB+	$100			;
		CMA#	' '				; IF IT IS THEN EXIT WITH FAIL

		JEQ		DROP_NOTHING	; EXIT INVALID

; ELSE DROP IS OK TO DO
; DROP BRICKS 
DROP_IT:
		LDA		M			; DROP BRICKS
		STA    !LOCAL1		; UPDATE VALUES
		LDA#	0
		STA		M			
		LDA		CRNROW
		SBA#	1
		MUL#	COLS
		ADA		CRNCOL
		SBA#	1
		TAX
		LDA#	'c'			; UPDATE CRANE
		STA		CRANE
		OUTB+	$100
		JMP		DROP_DONE


; DROP GIRDERS
DROP_GIR:
		LDA		CRNROW			; CHECK FOR LAST ROW
		CMA#	13
		JEQ		GDROP_IT		; IF NOT GO AND DROP
	
		LDA		CRNROW			; CHECK IN CASES OF NOT DROP		
		SBA#	1
		MUL#	38				; CHECK IF IT IS ON TOP OF VALID SUPPIES
		ADA		CRNCOL
		SBA#	1
		ADA#	38
		STA    !LOCAL1
		SBA		GIRDL
		SBA#	1
		TAX
		INB+	$100
		CMA#	'G'				; CHECK FOR G'S
		JEQ		DROP_NOTHING	; EXIT INVALID

		LDA    !LOCAL1
		ADA		GIRDR
		ADA#	1
		TAX
		INB+	$100
		CMA#	'G'				; CHECK FOR SAME 
		JEQ		DROP_NOTHING	; EXIT INVALID


		LDA		CRNROW
		SBA#	1
		MUL#	COLS
		ADA		CRNCOL
		SBA#	1

		ADA#	38
		ADA#	38
		STA    !LOCAL1

		ADA		GIRDR
		TAX
		INB+	$100
		CMA#	' '
		JEQ		DROP_NOTHING

		LDA    !LOCAL1
	
		SBA		GIRDL
		TAX
		INB+	$100
		CMA#	' '
		JEQ		DROP_NOTHING


; IF ALL CHECKS ARE OK
; GO AHEAD AND DROP IT (GIRDERS)
GDROP_IT:
		LDA#	0
		STA		GIRDR
		STA		GIRDL

		LDA		CRNROW
		SBA#	1
		MUL#	COLS
		ADA		CRNCOL
		SBA#	1
		TAX

		LDA#	'c'
		STA		CRANE
		OUTB+	CRT_BUF

		PSHA				; UPDATE VALUES
		LDA		CGIRD		;
		ADA#	1			;
		STA		CGIRD		;
		POPA	

		JMP		DROP_DONE

DROP_NOTHING:
		LDA#	0			; LOAD INVALID DROP
		JMP		@+2			; EXIT

DROP_DONE: 
		LDA#	1	     

		POPX			 
        FIN#    3        
        RTN                ; RETURN
        .PAGE                    ;


; ***********************************************************
; *															*
; *	ADDITIONAL FUNCTION TO DETERMINE THE INDEX VALUE OR CRN *
; *															*
; ***********************************************************

; THIS FUCNTION RETURNS THE ACC WITH THE VALUE OF THE POSSITION
; FROM THE $100 VBUFFER CRT OF THE CRANE.

GET_INDEX:
		BGN#	0
		LDA		CRNROW
		SBA#	1
		MUL#	COLS
		ADA		CRNCOL
		SBA#	1
		FIN#	0
		RTN




        .PAGE                    ;
        .EQU     @,$B80           ; CONSTANT DATA BASE

TITLE: .BLKW    13               ;
        .EQU     TITLE_LENGTH,38  ;

STATUS:.BLKW    13               ;
        .EQU     STATUS_LENGTH,38 ;

SEPLIN:.BLKW    13               ;
        .EQU     SEPLIN_LENGTH,38 ;

AGAIN: .BLKW    13               ;
        .EQU     AGAIN_LENGTH,38  ;

OVER:  .BLKW    13               ;
        .EQU     OVER_LENGTH,38   ;

RINVST:.BLKW    13               ;
        .EQU     RINVST_LENGTH,38 ;

SINVST:.BLKW    13               ;
        .EQU     SINVST_LENGTH,38 ;

ERRMSG:.BLKW    13               ;
        .EQU     ERRMSG_LENGTH,38 ;

TRYMSG:.BLKW    13               ;
        .EQU     TRYMSG_LENGTH,38 ;

BLANKS:.BLKW    1                ;
        .PAGE
        .EQU     @,$C00          ; VARIABLE DATA BASE

DBGCTL:.BLKW    1               ; DEBUG CONTROL
TIMER: .BLKW    1               ; LOCAL PROJECT TIME
PHASE: .BLKW    1               ; PROGRAM PHASE
ACTION:.BLKW    1               ; ACTION INPUI
MORE:  .BLKW    1               ; MORE   ANSWER
ERRIND:.BLKW    1               ; ERROR INDICATOR
TRIES: .BLKW    1               ; BLOCKED MOVE TRIES
SLINE: .BLKW    1               ; SOLUTION LINE

GIRDL: .BLKW    1               ; LEFT  GIRDER SEGMENTS
GIRDR: .BLKW    1               ; RIGHT GRIDER SEGMENTS
TBRICK:.BLKW    1               ; TOTAL   BRICK  COUNT
TGIRD: .BLKW    1               ; TOTAL   GIRDER COUNT
CBRICK:.BLKW    1               ; CURRENT BRICK  COUNT
CGIRD: .BLKW    1               ; CURRENT GIRDER COUNT
SBRICK:.BLKW    1               ; SUPPLY  BRICK  COUNT
SGIRD: .BLKW    1               ; SUPPLY  GIRDER COUNT

NEXT:  .BLKW    1               ; NEXT SUPPLY TIME
READY: .BLKW    1               ; NEXT SUPPLY READY
INTYPE:.BLKW    1               ; INPUT TYPE
INTIME:.BLKW    1               ; INPUT TIME
INCNT: .BLKW    1               ; INPUT ITEM   COUNT
INBRIK:.BLKW    1               ; INPUT BRICK  COUNT
INGIRD:.BLKW    1               ; INPUT GIRDER COUNT
INLEN: .BLKW    1               ; INPUT GIRDER LENGTH

CRANE: .BLKW    1               ; CRANE CHARACTER
CRNROW:.BLKW    1               ; CRANE ROW
CRNCOL:.BLKW    1               ; CRANE COLUMN
PICKUP:.BLKW    1               ; LOAD PICKUP AREA
M:     .BLKW    1               ; CRANE BRICK LIFT COUNT
SCNLST:.BLKW    1               ; LAST INPUT SCAN CHARACTER
DECDIG:.BLKW    1               ; DECIMAL DIGIT VALUE
BUFADR:.BLKW    1               ; INPUT BUFFER ADDRESS

SGIRDL:.BLKW    MAXGRD          ; SUPPLY GIRDER LENGTHS

        .BLKW    8               ; FILL

SBUF:  .BLKW    (BROWS*BCOLS+2)/3             ; SOLUTION BUFFER

CBUF:  .BLKW    ((ROWS-DROWS)*(SUCPOS-1)+2)/3 ; CONSTRUCT BUFFER

DATEND:.BLKW    1               ;
        .PAGE                    ;
        .END                     ;
