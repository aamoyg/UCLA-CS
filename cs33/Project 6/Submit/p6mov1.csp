;       UCLA SPRING 2003
;       CS 33 PROJECT 6:  CONSTRUCTION PROJECT:
;                         OPERATOR MOVES 1
;       JOHN A. ROHR
;       JANUARY 20, 2003
;
;        .EQU     N,6                     ; BRICK GRAB LIMIT
;        .EQU     TRYLMT,10               ; MOVE  TRY  LIMIT

;        .EQU     TIMBIN,$FF7             ; BINARY TIME LOCATION

;        .EQU     DEBUG,0                 ; DEBUG CONTROL
        .EQU     ROWS,14                 ; DISPLAY ROWS
;        .EQU     COLS,38                 ; DISPLAY COLUMNS

       .EQU     DROWS,3                 ; DATA     ROWS
       .EQU     BROWS,10                ; BUILDING ROWS
       .EQU     BCOLS,24                ; BUILDING COLUMNS
 ;      .EQU     SROWS,10                ; BUILDING ROWS
 ;      .EQU     SCOLS,12                ; BUILDING COLUMNS
       .EQU     MAXGRD,8                ; MAXIMUM  GIRDERS

;        .EQU     BURPOS,14               ; INITIAL BUILDING ROW
;       .EQU     BUCPOS,1                ; INITIAL BUILDING COLUMN
;        .EQU     SURPOS,14               ; INITIAL SUPPLY   ROW
        .EQU     SUCPOS,27               ; INITIAL SUPPLY   COLUMN
;        .EQU     CRRPOS,4                ; INITIAL CRANE    ROW
;        .EQU     CRCPOS,27               ; INITIAL CRANE    COLUMN
;        .EQU     CRICHR,'c'              ; INITIAL CRANE    CHAR

;       .EQU     MOVERT,'M'              ; MOVE RIGHT CHARACTER
;       .EQU     MOVELT,'K'              ; MOVE LEFT  CHARACTER
;       .EQU     MOVEUP,'H'              ; MOVE UP    CHARACTER
;       .EQU     MOVEDN,'P'              ; MOVE DOWN  CHARACTER

;       .EQU     ENDPRG,'Q'              ; QUIT               CHAR
;       .EQU     SHOCON,'C'              ; SHOW CONSTRUCTION  CHAR
;       .EQU     SHOSOL,'S'              ; SHOW SOLUTION      CHAR
;        .EQU     GRAB1,'1'               ; GRAB ONE BRICK     CHAR
;        .EQU     GRABG,'G'               ; GRAB GIRDER INPUT  CHAR
;        .EQU     GRABGC,'C'              ; GRAB GIRDER DISPLY CHAR
;        .EQU     RELEAS,'R'              ; RELEASE LOAD       CHAR

        .EQU     TITPOS,0                ; TITLE          POSITION
        .EQU     STAPOS,TITPOS+COLS      ; STATUS         POSITION
;        .EQU     SEPPOS,TITPOS+2*COLS    ; SEPARATOR      POSITION
;        .EQU     MODPOS,STAPOS           ; MODE           POSITION
;        .EQU     TIMPOS,STAPOS+10        ; TIME           POSITION
;        .EQU     BRKPOS,STAPOS+21        ; BRICKS         POSITION
;        .EQU     BRTPOS,STAPOS+25        ; BRICK TOTAL    POSITION
;        .EQU     GRDPOS,STAPOS+35        ; GIRDERS        POSITION
;        .EQU     GRTPOS,STAPOS+37        ; TOTAL GIRDERS  POSITION
;        .EQU     ERRPOS,STAPOS+9         ; TERMINAL ERROR POSITION
;        .EQU     TRYPOS,STAPOS+16        ; TOO MAY TRIES  POSITION
        .PAGE                    ;
 ;       .EQU     CRT_BUF,$100    ; CRT DISPLAY I/O ADDRESS
 ;       .EQU     CRT_XPOS,$314   ; CRT X POSITION  ADDRESS
 ;       .EQU     CRT_YPOS,$315   ; CRT Y POSITION  ADDRESS
 ;       .EQU     CRT_CTRL,$316   ; CRT CONTROL I/O ADDRESS

 ;       .EQU     INIFUN,$FFC     ; I/O INITIALIZATION FUNCTION
 ;       .EQU     KBDFUN,$FFD     ; I/O KEYBOARD       FUNCTION
 ;       .EQU     TAPFUN,$FFE     ; I/O TAPE DRIVE     FUNCTION
 ;       .EQU     CLKFUN,$FFF     ; I/O CLOCK          FUNCTION


 ;       .EQU     CLEAR,1         ; CRT   CLEAR SCREEN OPCODE
 ;       .EQU     BELLOP,6        ; CRT   RING BELL    OPCODE

 ;       .EQU     TAPREW,0        ; TAPE  REWIND       OPCODE
 ;       .EQU     TAPRD,1         ; TAPE  READ         OPCODE

 ;       .EQU     CLKRES,1        ; CLOCK RESET OPCODE + 1
 ;       .EQU     CLKGO,2         ; CLOCK START OPCODE + 1
 ;       .EQU     CLKSTP,0        ; CLOCK STOP  OPCODE + 1


 ;       .EQU     TERM,0          ; STRING TERMINATOR


 ;       .EQU     SUCCES,0        ; SUCCESS INDICATOR
 ;       .EQU     I,1             ; LOOP INDEX


 ;       .EQU     ERROR,$B00      ; DISPLAY ERROR       SUBROTUINE
 ;       .EQU     PUTNUM,$B01     ; DISPLAY NUMBER      SUBROUTINE
 ;      .EQU     PTOA,$B02       ; POSITION-TO-ADDRESS FUNCTION


        .EQU     @,$600          ; SUBROUTINE MODULE CODE ADDRESS

                                 ; TRANSFER TABLE
         JMP     RIGHT           ; MOVE RIGHT    FUNCTION
         JMP     LEFT            ; MOVE LEFT     FUNCTION
         JMP     UP              ; MOVE UP       FUNCTION
         JMP     DOWN            ; MOVE DOWN     FUNCTION
        .PAGE      


.EQU	LOCAL1,	0				 ; LOCAL VARIABLE FOR ALL FUNCTIONS
.EQU	LOCAL2,	1				 ; LOCAL VARIABLE FOR ALL FUCNTIONS



; ***********************************
; *									*
; *		MOVE RIGHT FUCNTION			*
; *									*
; ***********************************


RIGHT:  BGN#    2               ; INITIATE FUNCTION
        PSHX                    ; SAVE XR

								; CHECK FOR END OF CRT
		LDA		CRNCOL			; 
		CMA#	38				;
		JEQ		RINV			; EXIT RIGHT AWAY
								; CHECK FOR TYPE OF OPERATION        
        LDA		CRANE			; GET CRANE
		CMA#	'c'				; TEST
		JEQ		RSMALL_C		; JUMP
		CMA#	'C'				; TEST
		JEQ		RBIG_C			; JUMP
		JMP		R_NUMBER		; ELSE HAS TO BE NUMBER	

RSMALL_C:
							; TEST FOR VALID MOVE
							; CHECK IF THE NEXT POSSITION IS EMTPY
		LDA		CRNROW		; GET LOCATION BY ROW
		SBA#	1			;
		MUL#	38			;
		ADA		CRNCOL		; GET LOCATION BY COL
		TAX					;
		INB+	$100		;
		CMA#	' '			;
		JNE		RINV		;
							; UPDATE DISPLAY TO BLANK
		LDA		CRNROW		; GET LOCATION BY ROW
		SBA#	1			;
		MUL#	38			;
		ADA		CRNCOL		; GET LOCATION BY COL
		SBA#	1			;
		TAX
		LDA#	' '
		OUTB+	$100
							; REDRAW SMALL CRANE		
		INC		CRNCOL		;
		LDA		CRNROW		; GET LOCATION BY ROW
		SBA#	1			;
		MUL#	38			;
		ADA		CRNCOL		; GET LOCATION BY COL
		SBA#	1			;
		TAX					;
		LDA#	'c'			;
		OUTB+	$100		;
		JMP		RTDONE		;

R_NUMBER:
							; GET NUMBER OF BRIKS
							; CHECK FOR VALID MOVE ASN M NUMBER OF EMPTY SPACES
							; LOOP OF EMPTY BLANKS
							; GET ORIGINAL LOCATION
		LDA		CRNROW		; GET LOCATION BY ROW
		SBA#	1			;
		MUL#	38			;
		ADA		CRNCOL		; GET LOCATION BY COL
		STA		!LOCAL1		; RIGHT 1 GETS INDEX OF BUFFER TO CHECK

		LDX#	0
RLOOP:	CMX		M
		JEQ		RL_DONE		; DONE CHECKING
		STX		!LOCAL2
		LDX		!LOCAL1
		ADX#	38
		INB+	$100
		CMA#	' '
		JNE		RINV
		STX		!LOCAL1
		LDX		!LOCAL2
		ADX#	1
		JMP		RLOOP	
RL_DONE:
		JSR		CLEAR_BRICKS
		INC		CRNCOL				; MOVE TO NEXT POSSITION
		JSR		DRAW_BRICKS
		JMP		RTDONE
RBIG_C:
							; TEST FOR VALID MOVE TO RIGHT
		LDA		CRNROW		; GET LOCATION BY ROW
		MUL#	38			;
		ADA		CRNCOL		; GET LOCATION BY COL
		STA		!LOCAL1
		ADA		GIRDR
		TAX
		INB+	$100
		CMA#	' '
		JNE		RINV
							; CHECK IF THE LEFT MOST CHAR IS NOT ON THE EDGE
		LDX		CRNCOL
		ADX		GIRDR
		CMX#	38
		JGE		RINV

							; CHECK IF THE GIRDER HAS BEEN LIFTED UP FIRST

		LDA		CRNROW		; GET LOCATION BY ROW
		MUL#	38			;
		ADA		CRNCOL		; GET LOCATION BY COL
		SBA#	1
		STA		!LOCAL1		; RIGHT 1 GETS INDEX OF BUFFER TO CHECK
		LDX		!LOCAL1		; CLEAR GIRDER
		ADX#	38			;
		SBX		GIRDL		;
		STX		!LOCAL1		; LOCAL1 START POSSITION ON THE LEFT
		ADX		GIRDR		; END POSSITION
		ADX		GIRDL
		ADX#	1			; CHECK ONE EXTRA BLOCK
		STX		!LOCAL2		; END POSSITION IN THE BUFFER
		LDA#	'G'			; BLANK SCREEN
		LDX		!LOCAL1
RLOOP2:
		CMX		!LOCAL2
		JGT		DONE_RLOOP2
		INB+	$100
		CMA#	' '
		JNE		RINV	
		ADX#	1	
		JMP		RLOOP2
DONE_RLOOP2:
							; ELSE IT IS A VALID MOVE
		JSR		CLEAR_GIRDERS
		INC		CRNCOL
		JSR		DRAW_GIRDERS
		JMP		RTDONE
RINV:
		LDA#	0
		JMP		R_EXIT
RTDONE:  LDA#	 1         ; SET SUCCESS INDICATOR
R_EXIT:
         FIN#    2               ; TERMINATE FUNCTION
         POPX                    ; RESTORE XR
         RTN                     ; RETURN
        .PAGE                


; ***********************************
; *									*
; *		MOVE LEFT FUCNTION			*
; *									*
; ***********************************
LEFT:   BGN#    2               ; INITIATE FUNCTION
        PSHX                    ; SAVE XR
								; CHECK FOR END OF CRT
		LDA		CRNCOL
		CMA#	1
		JEQ		LINV			; EXIT WITH INVALID MOV
       
        LDA		CRANE
		CMA#	'c'
		JEQ		LSMALL_C
		CMA#	'C'
		JEQ		LBIG_C
		JMP		L_NUMBER			

; CHECK SIMPLE c CRANE
;       
LSMALL_C:
							; CHECK IF THE NEXT POSSITION IS EMTPY
		LDA		CRNROW		; GET LOCATION BY ROW
		SBA#	1			;
		MUL#	38			;
		ADA		CRNCOL		; GET LOCATION BY COL
		SBA#	2
		TAX
		INB+	$100
		CMA#	' '
		JNE		LINV		
							; UPDATE DISPLAY TO BLANK
		LDA		CRNROW		; GET LOCATION BY ROW
		SBA#	1			;
		MUL#	38			;
		ADA		CRNCOL		; GET LOCATION BY COL
		SBA#	1			;
		TAX
		LDA#	' '
		OUTB+	$100
							; REDRAW SMALL CRANE		
		DEC		CRNCOL
		LDA		CRNROW		; GET LOCATION BY ROW
		SBA#	1			;
		MUL#	38			;
		ADA		CRNCOL		; GET LOCATION BY COL
		SBA#	1			;
		TAX
		LDA#	'c'
		OUTB+	$100
		JMP		LTDONE
								; CHECK LOADED BRICK CRANE
L_NUMBER:
		LDA		CRNROW			; GET LOCATION BY ROW
		SBA#	1				;
		MUL#	38				;
		ADA		CRNCOL			; GET LOCATION BY COL
		SBA#	2				;
		STA		!LOCAL1			; RIGHT 1 GETS INDEX OF BUFFER TO CHECK
		
		LDX#	0
LLOOP:	CMX		M
		JEQ		LL_DONE			; DONE CHECKING
		STX		!LOCAL2
		LDX		!LOCAL1
		ADX#	38
		INB+	$100
		CMA#	' '
		JNE		LINV
		STX		!LOCAL1
		LDX		!LOCAL2
		ADX#	1
		JMP		LLOOP	
LL_DONE:
		JSR		CLEAR_BRICKS
		DEC		CRNCOL			; MOVE TO NEXT POSSITION
		JSR		DRAW_BRICKS
		JMP		LTDONE
LBIG_C:      
								; TEST FOR VALID MOVE TO RIGHT
		LDA		CRNROW			; GET LOCATION BY ROW
		MUL#	38				;
		ADA		CRNCOL			; GET LOCATION BY COL
		SBA#	2	
		SBA		GIRDL			;
		STA		!LOCAL1			; RIGHT 1 GETS INDEX OF BUFFER TO CHECK
		TAX
		INB+	$100
		CMA#	' '
		JNE		RINV
								; CHECK FOR EDGE OF SCREEN LEFT
		LDX		CRNCOL
		SBX		GIRDL
		CMX#	1
		JLE		LINV
							; CHECK IF THE GIRDER HAS BEEN LIFTED UP FIRST

		LDA		CRNROW		; GET LOCATION BY ROW
		MUL#	38			;
		ADA		CRNCOL		; GET LOCATION BY COL
		SBA#	2			; CHECK ONE EXTRA BLOCK
		STA		!LOCAL1		; RIGHT 1 GETS INDEX OF BUFFER TO CHECK
		LDX		!LOCAL1		; CLEAR GIRDER
		ADX#	38
		SBX		GIRDL
		STX		!LOCAL1		; LOCAL1 START POSSITION ON THE LEFT
		ADX		GIRDR		; END POSSITION
		ADX		GIRDL
		ADX#	1			; ONE EXTRA BLOCK CHECKING
		STX		!LOCAL2		; END POSSITION IN THE BUFFER
		LDA#	'G'			; BLANK SCREEN
		LDX		!LOCAL1
LLOOP2:
		CMX		!LOCAL2
		JGT		DONE_LLOOP2
		INB+	$100
		CMA#	' '
		JNE		RINV	
		ADX#	1	
		JMP		LLOOP2
DONE_LLOOP2:
								; ELSE IT IS A VALID MOVE
		JSR		CLEAR_GIRDERS
		DEC		CRNCOL
		JSR		DRAW_GIRDERS
		JMP		LTDONE
LINV:
		LDA#	 0      
		JMP		L_EXIT

LTDONE: LDA#	 1               ; SET SUCCESS INDICATOR

L_EXIT:
         FIN#    2               ; TERMINATE FUNCTION
         POPX                    ; RESTORE XR
         RTN                     ; RETURN
        .PAGE                


; ***********************************
; *									*
; *		MOVE UP FUCNTION			*
; *									*
; ***********************************
UP:     BGN#    2               ; INITIATE FUNCTION
        PSHX                    ; SAVE XR
								; CHECK SEALING OF SCREEN
		LDA		CRNROW
		CMA#	4
		JEQ		UINV
        LDA		CRANE
		CMA#	'c'
		JEQ		USMALL_C
		CMA#	'C'
		JEQ		UBIG_C
		JMP		U_NUMBER			
USMALL_C:
							; MOVE UP
							; CHECK IF VALID MOVE
							; UPDATE DISPLAY TO BLANK
		LDA		CRNROW		; GET LOCATION BY ROW
		SBA#	1			;
		MUL#	38			;
		ADA		CRNCOL		; GET LOCATION BY COL
		SBA#	1			;
		TAX
		LDA#	' '
		OUTB+	$100
							; REDRAW SMALL CRANE		
		DEC		CRNROW
		LDA		CRNROW		; GET LOCATION BY ROW
		SBA#	1			;
		MUL#	38			;
		ADA		CRNCOL		; GET LOCATION BY COL
		SBA#	1			;
		TAX
		LDA#	'c'
		OUTB+	$100
		JMP		UPDONE
U_NUMBER:
		JSR		CLEAR_BRICKS		
		DEC		CRNROW
		JSR		DRAW_BRICKS
		JMP		UPDONE
UBIG_C:      
		JSR		CLEAR_GIRDERS
		DEC		CRNROW
		JSR		DRAW_GIRDERS
		JMP		UPDONE
UINV:
		LDA#	 0
		JMP		U_EXIT
UPDONE: LDA#	 1         
U_EXIT:
         FIN#    2               ; TERMINATE FUNCTION
         POPX                    ; RESTORE XR
         RTN                     ; RETURN
        .PAGE               



; ***********************************
; *									*
; *		MOVE DOWN FUCNTION			*
; *									*
; ***********************************
DOWN:   BGN#    2               ; INITIATE FUNCTION
        PSHX                    ; SAVE XR

        LDA		CRANE
		CMA#	'c'
		JEQ		DSMALL_C
		CMA#	'C'
		JEQ		DBIG_C
		JMP		D_NUMBER			
DSMALL_C:
							; MOVE UP
							; CHECK IF VALID MOVE
							; CHECK FOR END OF CRT
		LDA		CRNROW
		CMA#	13
		JEQ		DINV
							; CHECK IF THE NEXT POSSITION IS EMTPY
		LDA		CRNROW		; GET LOCATION BY ROW
		MUL#	38			;
		ADA		CRNCOL		; GET LOCATION BY COL
		SBA#	1
		TAX
		INB+	$100
		CMA#	' '
		JNE		DINV		
							; UPDATE DISPLAY TO BLANK
		LDA		CRNROW		; GET LOCATION BY ROW
		SBA#	1			;
		MUL#	38			;
		ADA		CRNCOL		; GET LOCATION BY COL
		SBA#	1			;
		TAX
		LDA#	' '
		OUTB+	$100
							; REDRAW SMALL CRANE		
		INC		CRNROW
		LDA		CRNROW		; GET LOCATION BY ROW
		SBA#	1			;
		MUL#	38			;
		ADA		CRNCOL		; GET LOCATION BY COL
		SBA#	1			;
		TAX
		LDA#	'c'
		OUTB+	$100
		JMP		DWDONE
D_NUMBER:
							; GET NUMBER OF BRIKS
							; CHECK FOR VALID MOVE ASN M NUMBER OF EMPTY SPACES
							; LOOP OF EMPTY BLANKS
							; GET ORIGINAL LOCATION
		LDA		CRNROW		; GET LOCATION BY ROW
		SBA#	1			;
		MUL#	38			;
		ADA		CRNCOL		; GET LOCATION BY COL
		SBA#	1			;
		STA		!LOCAL1		; LOCAL1 GETS INDEX OF BUFFER TO CHECK
							; CHECK IF BOTTOM IS EMPTY OR NOT LAST COL
							; CHECK LAST COLL
		LDA		M
		ADA		CRNROW
		CMA#	14
		JEQ		DINV
		LDA		M
		ADA#	1
		MUL#	38
		ADA		!LOCAL1
		TAX
		INB+	$100
		CMA#	' '
		JNE		DINV
		JSR		CLEAR_BRICKS
		INC		CRNROW
		JSR		DRAW_BRICKS
		JMP		DWDONE
DBIG_C:      
							; CHECK THAT ALL BOTTOM SPACES ARE AVAILABLE BLANK
		LDA		CRNROW		; GET LOCATION BY ROW
		MUL#	38			;
		ADA		CRNCOL		; GET LOCATION BY COL
		SBA#	1
		STA		!LOCAL1		; RIGHT 1 GETS INDEX OF BUFFER TO CHECK
		LDX		!LOCAL1
		ADX#	38
		SBX		GIRDL
		STX		!LOCAL1		; LOCAL1 START POSSITION ON THE LEFT
		ADX		GIRDR		; END POSSITION
		ADX		GIRDL
		STX		!LOCAL2		; END POSSITION IN THE BUFFER
		LDA#	' '			; BLANK SCREEN
		LDX		!LOCAL1
DOWN_CLR:
		CMX		!LOCAL2
		JGT		DONE_CLR_DOWN
		INB+	$100
		CMA#	' '
		JNE		DINV	
		ADX#	1	
		JMP		DOWN_CLR
DONE_CLR_DOWN:
							; MOVE IS GOOD TO GO
		JSR		CLEAR_GIRDERS
		INC		CRNROW
		JSR		DRAW_GIRDERS
		JMP		DWDONE
DINV:
		LDA#	 0
		JMP		D_EXIT
DWDONE: LDA#	 1                ; SET SUCCESS INDICATOR
D_EXIT:
         FIN#    2               ; TERMINATE FUNCTION
         POPX                    ; RESTORE XR
         RTN                     ; RETURN

;
;	THIS FUNCTION CLEARS THE SPACES USED BY THE BRIKS
;
CLEAR_BRICKS:
		BGN#	2
		PSHX
		LDA		CRNROW		; GET LOCATION BY ROW
		SBA#	1			;
		MUL#	38			;
		ADA		CRNCOL		; GET LOCATION BY COL
		SBA#	1
		STA		!LOCAL1		; RIGHT 1 GETS INDEX OF BUFFER TO CHECK
		TAX
		LDA#	' '			; EMPTY CURSOR
		OUTB+	$100		;
		LDX#	0
BR_L1:	CMX		M
		JEQ		BL_DONE1	; DONE CHECKING
		PSHX
		LDX		!LOCAL1
		ADX#	38
		LDA#	' '
		OUTB+	$100
		STX		!LOCAL1
		POPX
		ADX#	1
		JMP		BR_L1	
BL_DONE1:
		POPX
		FIN#	2
		RTN

;
;	THIS FUNCTION CLEARS THE SPACES USED BY THE BRIKS
;
;
DRAW_BRICKS:
		BGN#	2
		LDA		CRNROW		; GET LOCATION BY ROW
		SBA#	1			;
		MUL#	38			;
		ADA		CRNCOL		; GET LOCATION BY COL
		SBA#	1
		STA		!LOCAL1		; RIGHT 1 GETS INDEX OF BUFFER TO CHECK
		LDA		M
		ADA#	'0'
		LDX		!LOCAL1
		OUTB+	$100
		LDX#	0
DR_B1:	CMX		M
		JEQ		DR_DONE1
		STX		!LOCAL2
		LDX		!LOCAL1
		ADX#	38
		LDA#	'B'
		OUTB+	$100
		STX		!LOCAL1
		LDX		!LOCAL2
		ADX#	1
		JMP		DR_B1
DR_DONE1:
		FIN#	2
		RTN

;
;	THIS FUNCTION CLEARS THE SPACES USED BY THE GIRDERS
;
;
CLEAR_GIRDERS:
		BGN#	2
		PSHX
		LDA		CRNROW		; GET LOCATION BY ROW
		SBA#	1			;
		MUL#	38			;
		ADA		CRNCOL		; GET LOCATION BY COL
		SBA#	1
		STA		!LOCAL1		; RIGHT 1 GETS INDEX OF BUFFER TO CHECK
		LDX		!LOCAL1
		LDA#	' '
		OUTB+	$100
		LDX		!LOCAL1
		ADX#	38
		SBX		GIRDL
		STX		!LOCAL1		; LOCAL1 START POSSITION ON THE LEFT
		ADX		GIRDR		; END POSSITION
		ADX		GIRDL
		STX		!LOCAL2		; END POSSITION IN THE BUFFER
		LDA#	' '			; BLANK SCREEN
		LDX		!LOCAL1
LOOP_CLR:
		CMX		!LOCAL2
		JGT		DONE_CLR_G
		OUTB+	$100	
		ADX#	1	
		JMP		LOOP_CLR
DONE_CLR_G:

		POPX
		FIN#	2
		RTN

;
;	THIS FUNCTION DRAWS THE SPACES USED BY THE GIRDERS
;
DRAW_GIRDERS:
		BGN#	2
		PSHX
		LDA		CRNROW		; GET LOCATION BY ROW
		SBA#	1			;
		MUL#	38			;
		ADA		CRNCOL		; GET LOCATION BY COL
		SBA#	1
		STA		!LOCAL1		; RIGHT 1 GETS INDEX OF BUFFER TO CHECK
		LDX		!LOCAL1		; CLEAR GIRDER
		LDA#	'C'
		OUTB+	$100
		LDX		!LOCAL1
		ADX#	38
		SBX		GIRDL
		STX		!LOCAL1		; LOCAL1 START POSSITION ON THE LEFT
		ADX		GIRDR		; END POSSITION
		ADX		GIRDL
		STX		!LOCAL2		; END POSSITION IN THE BUFFER
		LDA#	'G'			; BLANK SCREEN
		LDX		!LOCAL1
LOOP_DRW:
		CMX		!LOCAL2
		JGT		DONE_DRW_G
		OUTB+	$100	
		ADX#	1	
		JMP		LOOP_DRW
DONE_DRW_G:
		POPX
		FIN#	2
		RTN


        .PAGE                    ;
        .EQU     @,$B80           ; CONSTANT DATA BASE

TITLE: .BLKW    13               ;
        .EQU     TITLE_LENGTH,38  ;

STATUS:.BLKW    13               ;
        .EQU     STATUS_LENGTH,38 ;

SEPLIN:.BLKW    13               ;
        .EQU     SEPLIN_LENGTH,38 ;

AGAIN: .BLKW    13               ;
        .EQU     AGAIN_LENGTH,38  ;

OVER:  .BLKW    13               ;
        .EQU     OVER_LENGTH,38   ;

RINVST:.BLKW    13               ;
        .EQU     RINVST_LENGTH,38 ;

SINVST:.BLKW    13               ;
        .EQU     SINVST_LENGTH,38 ;

ERRMSG:.BLKW    13               ;
        .EQU     ERRMSG_LENGTH,38 ;

TRYMSG:.BLKW    13               ;
        .EQU     TRYMSG_LENGTH,38 ;

BLANKS:.BLKW    1                ;
        .PAGE
        .EQU     @,$C00          ; VARIABLE DATA BASE

DBGCTL:.BLKW    1               ; DEBUG CONTROL
TIMER: .BLKW    1               ; LOCAL PROJECT TIME
PHASE: .BLKW    1               ; PROGRAM PHASE
ACTION:.BLKW    1               ; ACTION INPUI
MORE:  .BLKW    1               ; MORE   ANSWER
ERRIND:.BLKW    1               ; ERROR INDICATOR
TRIES: .BLKW    1               ; BLOCKED MOVE TRIES
SLINE: .BLKW    1               ; SOLUTION LINE

GIRDL: .BLKW    1               ; LEFT  GIRDER SEGMENTS
GIRDR: .BLKW    1               ; RIGHT GRIDER SEGMENTS
TBRICK:.BLKW    1               ; TOTAL   BRICK  COUNT
TGIRD: .BLKW    1               ; TOTAL   GIRDER COUNT
CBRICK:.BLKW    1               ; CURRENT BRICK  COUNT
CGIRD: .BLKW    1               ; CURRENT GIRDER COUNT
SBRICK:.BLKW    1               ; SUPPLY  BRICK  COUNT
SGIRD: .BLKW    1               ; SUPPLY  GIRDER COUNT

NEXT:  .BLKW    1               ; NEXT SUPPLY TIME
READY: .BLKW    1               ; NEXT SUPPLY READY
INTYPE:.BLKW    1               ; INPUT TYPE
INTIME:.BLKW    1               ; INPUT TIME
INCNT: .BLKW    1               ; INPUT ITEM   COUNT
INBRIK:.BLKW    1               ; INPUT BRICK  COUNT
INGIRD:.BLKW    1               ; INPUT GIRDER COUNT
INLEN: .BLKW    1               ; INPUT GIRDER LENGTH

CRANE: .BLKW    1               ; CRANE CHARACTER
CRNROW:.BLKW    1               ; CRANE ROW
CRNCOL:.BLKW    1               ; CRANE COLUMN
PICKUP:.BLKW    1               ; LOAD PICKUP AREA
M:     .BLKW    1               ; CRANE BRICK LIFT COUNT
SCNLST:.BLKW    1               ; LAST INPUT SCAN CHARACTER
DECDIG:.BLKW    1               ; DECIMAL DIGIT VALUE
BUFADR:.BLKW    1               ; INPUT BUFFER ADDRESS

SGIRDL:.BLKW    MAXGRD          ; SUPPLY GIRDER LENGTHS

        .BLKW    8               ; FILL

SBUF:  .BLKW    (BROWS*BCOLS+2)/3             ; SOLUTION BUFFER

CBUF:  .BLKW    ((ROWS-DROWS)*(SUCPOS-1)+2)/3 ; CONSTRUCT BUFFER

DATEND:.BLKW    1               ;
        .PAGE                    ;
        .END                     ;
