<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
 <title>Project 1 Submission Requirements</title>
</head>
<body>
<div align="right">
Spring 2003 CS 33 
</div>
<div align="center">
<h2>Project 1 Submission Requirements</h2>
</div>
<p>
As you get ready to turn in Project 1, prepare the following two files:
</p>
<ul>
<li>
<p><code>gray.cpp</code>, your C++ program.  To get any correctness points
on this assignment, gray.cpp must build successfully under the Visual Studio
.NET C++ compiler.  During execution, it must not perform any undefined
action, such as dividing by 0.  It must produce <em>exactly</em> the following
output for this simple test case (user input is indicated in boldface):
</p>
<pre>
	GRAY-CODE ENCODER

	Width:<strong>2</strong>
	Value:<strong>0</strong>
	Width:<strong>0</strong>
	Word = 000000(16)

	Good Bye!
</pre>
<p>
Notice the empty line between "GRAY-CODE ENCODER" and the first "Width:"
prompt.  Notice the spelling and capitalization of the words.  Notice the
punctuation marks.  It may seem petty of us to take off 50 points for a simple
misspelling, but these are the sorts of details that you'll need to pay
attention to in order to succeed in the assembly language projects.
</p>
<p>
To earn points for program design and implementation, your coding must be
clear, simple, and straightforward.  Your code should be formatted readably,
and liberally commented to help a reader understand the purpose of each
segment of code.  Your program must be suitable as a design for an assembly
language version; follow the <a href="../handouts/cpp_style.html">C++ Style
Guidelines</a> to achieve this.
</p>
</li><li>
<p>
<code>report.doc</code> or <code>report.txt</code>, your report.  This must
contain:
</p>
<ul>
<li>
<p>
a description of your algorithm, preferably using pseudocode
</p>
</li><li>
<p>
the bibliographic or URL reference(s) to the binary-to-gray code conversion
part of your program
</p>
</li><li>
<p>
your test cases and the expected results of those tests
</p>
</li>
</ul>
<p>
If your report file is named <code>report.doc</code>, it must be in Microsoft
Word format; if it's named <code>report.txt</code>, it must be an ordinary
text file.
</p>
</li>
</ul>
<p>
Make sure the two files have the names shown.  Do not, for example, name
the C++ program <code>Project1.cpp</code> or <code>grey.cpp</code> (note
the misspelling).
</p>
<p>
Create a zip file containing the two required files and nothing more.  (Do
not, for example, put in Visual Studio artifacts with suffixes like
.sln, .suo, .vcproj, .ncb, .ilk, .pdb, .htm, .obj, or .exe.)  To create a
zip file, you may use the TurboZip utility (available on the SEASnet
machines or obtainable from <a href="http://www.turbozip.com"
target="_blank">FileStream</a>) or any other utility that creates files in
zip format (e.g., <a href="http://www.winzip.com"
target="_blank">WinZip</a> or <a href="http://www.powerarchiver.com"
target="_blank">PowerArchiver</a>).  You may name the zip file itself anything
you wish.
</p>
<p>
If you do not follow the requirements described here, your score
on this project will be zero.  "Do you mean that if I do everything right
except misspell a file name, I'll get no points whatsoever?"  Yes.  That
seems harsh, but some of you need to be hit over the head with a draconian
grading policy to get you to learn to pay attention to details.
</p>
<p>
When you are ready, <a href="../submit/submit1.html">turn in the zip file</a>.
</p>
</body>
</html>
